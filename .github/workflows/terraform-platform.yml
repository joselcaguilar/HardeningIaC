name: "TF Template Workflow"

on:
  workflow_call:
  workflow_dispatch:

env:
  tflintRulesExcluded: ""
  tfLintAzureRulesVersion: v0.14.0
  tfLintVersion: v0.34.1
  tfsecVersion: v1.1.5
  imageName: sparkfy22ml

jobs:
  deploy_frontend_infra:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - name: tflint acr
        id: tflint-execution
        continue-on-error: true
        working-directory: ${{ github.workspace }}/src/Terraform/container-registry
        run: |
            tfLintRulesExcluded=`for i in $(echo ${{ env.tflintRulesExcluded }} | sed "s/,/ /g"); do echo "--disable-rule=$i"; done`
  
            echo tflint --module -f sarif $tfLintRulesExcluded
            echo 'plugin "azurerm" {' >.tflint.hcl
            echo '  enabled = true' >>.tflint.hcl
            echo '}' >>.tflint.hcl
            mkdir -p .tflint.d/plugins
            cd .tflint.d/plugins
            
            curl -L "https://github.com/terraform-linters/tflint-ruleset-azurerm/releases/download/${{ env.tfLintAzureRulesVersion }}/tflint-ruleset-azurerm_linux_amd64.zip" -o tflint-AzRuleset.zip
            unzip tflint-AzRuleset.zip
            rm tflint-AzRuleset.zip
            chmod +x tflint-ruleset-azurerm
  
            docker run --rm -v "${{ github.workspace }}/src/Terraform:/data" -w="/data/container-registry" -t ghcr.io/terraform-linters/tflint:${{ env.tfLintVersion }} -f sarif --module $tfLintRulesExcluded > ${{ github.workspace }}/src/Terraform/container-registry/tflint-container-registry.sarif

      - name: tfsec acr
        id: tfsec-execution
        continue-on-error: true
        run: |
          docker run --rm -v "${{ github.workspace }}/src/Terraform:/src" aquasec/tfsec:${{ env.tfsecVersion }}  --format sarif /src/container-registry > ${{ github.workspace }}/src/Terraform/container-registry/tfsec-container-registry.sarif

      - name: Upload tflint SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ./src/Terraform/container-registry/tflint-container-registry.sarif

      - name: Upload tfsec SARIF file
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: ./src/Terraform/container-registry/tfsec-container-registry.sarif

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: ACR TF Deployment
        if: steps.tflint-execution.outcome == 'success' && steps.tfsec-execution.outcome == 'success'
        working-directory: ./src/Terraform/container-registry
        run: |
          export ARM_CLIENT_ID="${{ secrets.AZURE_AD_CLIENT_ID }}"
          export ARM_CLIENT_SECRET="${{ secrets.AZURE_AD_CLIENT_SECRET }}"
          export ARM_SUBSCRIPTION_ID="${{ secrets.ARM_SUBSCRIPTION_ID }}"
          export ARM_TENANT_ID="${{ secrets.AZURE_AD_TENANT_ID }}"
          
          terraform init
          terraform validate
          terraform plan -out tfplan
          terraform apply --auto-approve tfplan

      - name: Build docker Tensorflow model
        working-directory: ./src/Docker
        run: |
          docker build -t ${{ env.imageName }}:${{ github.run_number }} -f Dockerfile .

      - name: Run trivy scan the docker image
        working-directory:
        run: |
            docker run \
            --rm -v /var/run/docker.sock:/var/run/docker.sock -v $HOME:/root/.cache/ ghcr.io/aquasecurity/trivy:latest image \
            --severity MEDIUM,HIGH,CRITICAL \
            ${{ env.imageName }}:${{ github.run_number }}

      - uses: Azure/container-scan@v0 
        name: Scan image with Defender
        id: container-scan
        continue-on-error: true
        with:
          image-name: ${{ env.imageName }}:${{ github.run_number }}

      - name: Post logs to appinsights
        uses: Azure/publish-security-assessments@v0
        with:
          artifact-type: containerImage
          scan-results-path: ${{ steps.container-scan.outputs.scan-report-path }}
          connection-string: ${{ secrets.AZ_APPINSIGHTS_CONNECTION_STRING }}
          subscription-token: ${{ secrets.AZ_SUBSCRIPTION_TOKEN }}

      - name: Push Docker image
        uses: azure/CLI@v1
        with:
          inlineScript: |
            az acr login -n jojoacrspark
            
            docker tag "${{ env.imageName }}:${{ github.run_number }}" "jojoacrspark.azurecr.io/jojoacrspark/${{ env.imageName }}:${{ github.run_number }}"
            docker push jojoacrspark.azurecr.io/jojoacrspark/${{ env.imageName }}:${{ github.run_number }}